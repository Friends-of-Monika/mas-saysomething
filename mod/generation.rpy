init 101 python in _fom_saysomething:

    import os, re
    from store import mas_submod_utils

    def _get_sane_name(dir_name):
        illegal_chars = ['<', '>', ':', '"', '/', '\\', '|', '?', '*']
        sanitized_string = dir_name
        for char in illegal_chars:
            sanitized_string = sanitized_string.replace(char, '_')
        return sanitized_string

    SPEECHES_DIR_NAME = _get_sane_name(_("Say Something Speeches"))
    DEFAULT_SCRIPT_NAME = _get_sane_name(_("My Speech"))

    def _get_script_folder():
        path = os.path.join(renpy.config.basedir, SPEECHES_DIR_NAME)
        path = path.replace("\\", "/")
        return path

    SPEECHES_DIR_PATH = _get_script_folder()
    GENERATOR_IDENT = _("Say Something v{0}").format(
        mas_submod_utils.submod_map["Say Something"].version)


    def _get_split_name_ext(path):
        parts = path.partition(".")
        return parts[0], parts[1]

    def _get_unique_name(_dir, suggested_name):
        if not os.path.exists(os.path.join(_dir, suggested_name)):
            return suggested_name

        count = 1
        while True:
            if not os.path.exists(os.path.join(_dir, suggested_name + "(" + count + ")")):
                return suggested_name
            count += 1

    def get_script_name_suggestion():
        return _get_unique_name(SPEECHES_DIR_PATH, DEFAULT_SCRIPT_NAME)

    def is_script_name_exists(name):
        script_path = os.path.join(SPEECHES_DIR_PATH, name + ".rpy.txt")
        return os.path.exists(script_path)


    def _get_escaped_text(text):
        text = text.replace("\\", "\\\\")
        text = text.replace("\"", "\\\"")
        return text

    def _process_indent(_str):
        lines = _str.splitlines()
        if len(lines) < 2:
            return _str

        pat = re.compile(r"^(\s*)[^\s]*")
        indent = len(pat.findall(lines[1])[0])
        lines.pop(0)

        for i in range(len(lines)):
            lines[i] = lines[i][indent:]
        return "\n".join(lines)

    DEFAULT_EVENTLABEL_FORMAT = "monika_{0}"
    DEFAULT_CATEGORY = _get_escaped_text(_("Generated"))

    # %0 - event label
    # %1 - category
    # %2 - prompt
    # %3 - dialogue lines (must be indented)
    # %4 - Say Something Ident
    DEFAULT_SCRIPT_FORMAT = _process_indent(_("""
        ## WARNING! WARNING! WARNING! WARNING! WARNING! WARNING! WARNING!
        ## This isn't a complete topic, it actually needs adjustment!
        ## Before you simply drop this into game folder, take your time
        ## to read and understand what's inside this script file, please.
        ## IDEALLY you'd only use this as a sketch or template at best;
        ## if it works for you, please do so, if not - please be CAREFUL.

        ## First of, you'll have to adjust this header:
        init 5 python:
            addEvent(Event(
                persistent.event_database,

                ## Adjust this to your own preference:
                eventlabel="{0}",

                ## This, too:
                category=["{1}"],

                ## And this:
                prompt="{2}",

                ## Pick JUST ONE of them and uncomment (remove leading #):
                #random=True,
                #pool=True
            ), code="EVE")

        ## Then, MAKE SURE the label name AFTER the world 'label' matches
        ## the event label you've set in 'eventlabel=' bit up there:
        label {0}:
            ## And FINALLY, here is the actual code generated from the speech
            ## you've asked your Monika to say:
        {3}

            ## You may want to adjust this too, but GENERALLY you don't have to.
            ## If in your speech Monika says something like 'I love you', you
            ## may want to change this to this (uncomment the next line, remove
            ## the leading #, MAKE SURE there are EXACTLY FOUR SPACES before it):
            #return "love"

            ## If you have uncommented 'return' above, simply remove this line.
            ## If not, LEAVE IT AS IS! It's critical to have AT LEAST ONE return.
            return

        ## THIS SCRIPT WAS GENERATED BY: {4}
    """))

    def _get_sane_event_label(name):
        return re.sub("[^a-zA-Z0-9_]", "_", name).strip("_")

    def generate_script(session, name):
        def get_dialog_line(poses, pos, text):
            return ('m {0} "{1}"'.format(get_sprite_code(poses),
                                         _get_escaped_text(text)))

        lines = list()
        for poses, pos, text in session:
            lines.append("    " + get_dialog_line(poses, pos, text))

        if not os.path.exists(SPEECHES_DIR_PATH):
            os.makedirs(SPEECHES_DIR_PATH)
        path = os.path.join(SPEECHES_DIR_PATH, name + ".rpy.txt")

        with open(path, "w") as f:
            f.write(DEFAULT_SCRIPT_FORMAT.format(
                DEFAULT_EVENTLABEL_FORMAT.format(_get_sane_event_label(name)),
                DEFAULT_CATEGORY,
                _get_escaped_text(name),
                "\n".join(lines),
                GENERATOR_IDENT))